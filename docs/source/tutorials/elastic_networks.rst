Elastic Networks
================

The selection of output files for this tutorial is available from the
`MartiniGlass examples folder <https://github.com/Martini-Force-Field-Initiative/MartiniGlass/tree/main/examples/protein_elastic_network>`_.

Step 1: Martinize your protein
------------------------------

Create a martini model of a protein following the standard martinize2 protocol:

.. code-block::

    $ wget https://files.rcsb.org/download/1ubq.pdb
    $ grep "^ATOM" 1ubq.pdb > 1UBQ_clean.pdb
    $ martinize2 -f 1UBQ_clean.pdb -o topol.top -x 1UBQ_cg.pdb -elastic -ef 700

These commands:
 1. Download a 1ubq.pdb from the protein database

 2. Prepare it to be martinized

 3. Create a coarse grained model of the protein

From this, you should expect the following files:

* ``1UBQ_cg.pdb``: a pdb file with the coordinates of the coarse grained beads
* ``topol.top``: a gromacs topology file describing your system.
* ``molecule.itp``: the coarse grained topology of the 1ubq protein

Without any further additions, ``topol.top`` only contains a single copy of your protein.


Step 2: Run MartiniGlass
------------------------

The system is now ready to be processed by MartiniGlass. In this case, we have a protein with an elastic network.
Therefore, the command we need to process with MartiniGlass is:

.. code-block::

    $ martiniglass -p topol.top -el -vf

This will generate the following files describing your system:

* ``molecule_0_surplus_en.txt``: bonds which VMD will not be able to visualise
* ``molecule_0_en.itp``: the elastic network of the protein
* ``molecule_0_vis.itp``: the direct bonded topology of the protein
* ``en.top``: a topology file for the elastic networks of the system
* ``vis.top``: a topology file for the direct bonded networks of the system

Regarding the contents of ``molecule_0_surplus_en.txt``, VMD is not able to draw > 12 bonds between
atoms in a system. Because of the way elastic networks are generated by Martinize2, such features are a
relatively common occurance. Therefore, when MartiniGlass discovers beads with > 12 bonds attached to them,
they are edited such that some are removed so dynamic visualisation is possible.
This problem is discussed further in :doc:`cylinders`.

Alongside these file, several files have been written to enable the topology to be loaded into VMD through
the use of the ``-vf`` (Visualisation Files) flag:

* ``vis.vmd``: VMD visualisation state file
* ``cg_bonds-v6.tcl``: vmd commands to draw bonds between atoms
* ``eigen.py``: auxiliary python script required by ``cg_bonds-v6.tcl``

Step 3: Loading your system in VMD
----------------------------------

Step 3a: Loading the initial system
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

To fully view an elastic network in VMD using the files provided, the system needs to be loaded twice in VMD.

1. Load the system in VMD from the command line using the visualisation state file provided:

.. code-block::

    $ vmd 1UBQ_cg.pdb -e vis.vmd

This will load your system into VMD using the suggested visualisation mode.

``vis.vmd`` includes commands that will:

* Load the commands described in ``cg_bonds-v6.tcl``
* Read in the visualisation topology described in ``vis.top`` for your system.

The image in VMD you now see should look something like this

.. image::
    https://github.com/user-attachments/assets/90541ec1-1f90-4844-994e-6f7aad03519e

where the backbone of the protein has been rendered as a continuous object.


Step 3b: Loading the elastic network
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Next, the system must be loaded a second time. Open the *Molecule File Browser* from the VMD menu
(File -> New Molecule...) and load the same input structure file, into a New Molecule:

.. image::
    https://github.com/user-attachments/assets/7d27ba23-3c5d-4512-bd36-13f945efb320

The system should now appear twice in the VMD main menu. With the system loaded a second time, the
elastic network topology can be loaded onto it. Open the Tk console from the VMD menu
(Extensions -> Tk Console), and load the topology using the ``cg_bonds`` programe:

.. code-block::

    % cg_bonds -top en.top

This will load the topology information into the second system loaded. The bonds are then best visible
by changing the graphics of the second molecule. Load the Graphical Representations menu from the VMD
main menu (Graphics -> Representations...). Making sure you have the second molecule selected, change
the Drawing Method to bonds, and pick a colour of your choice. Make sure as well that the atoms selected
are only the backbone atom beads.

Applying these will ensure that the elastic network is now visible:

.. image::
    https://github.com/user-attachments/assets/268e5cb9-fcea-4b5a-921a-40a433b4a91e

Addendum: Loading everything in one go
--------------------------------------

The above sequence of commands requires several steps of interaction with VMD to visualise a complete
system. To automate this sequence, several lines can be added to the ``vis.vmd`` file to automate
the second loading of a frame and trajectory into VMD:

.. code-block::

    % mol new frame.gro type gro first 0 last -1 step 1
    % mol addfile trajectory.xtc type xtc first 0 last -1 step 1 waitfor all molid 1

    % cg_bonds -top en.top
    % mol modstyle 0 1 Bonds 0.300000 52.000000
    % mol modcolor 0 1 ColorID 16
    % mol modmaterial 0 1 AOChalky


These lines are automatically added with the appropriate file names when the structure (and optionally,
trajectory) are provided to MartiniGlass:

.. code-block::

    $ martiniglass -p topol.top -f frame.gro -traj trajectory.xtc -vf -en

If only the frame is given, then the line to load the trajectory will be skipped. The trajectory
may be added using the ``-traj`` flag of MartiniGlass.

Subsequently the system can be loaded into VMD as before:

.. code-block::

    $ vmd frame.gro trajectory.xtc -e vis.vmd

This command will load the given structure and trajectory files twice, and apply the two
visualisation topologies (``vis.top`` and ``en.top`` respectively) to the two systems in VMD. If
the trajectory file is provided, the elastic bonds will be shown dynamically, changing in length
as they do throughout the simulation.


